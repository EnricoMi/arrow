# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'
    tags:
      - '**'
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'
  pull_request:
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'

permissions:
  contents: read

env:
  ARCHERY_DEBUG: 1
  ARROW_ENABLE_TIMING_TESTS: OFF
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:
  docker:
    name: ${{ matrix.title }}
    runs-on: ${{ matrix.runs-on }}
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            clang-tools: 14
            image: ubuntu-cpp-thread-sanitizer
            llvm: 14
            runs-on: ubuntu-latest
            title: AMD64 Ubuntu 22.04 C++ TSAN
            ubuntu: 22.04
    env:
      ARCH: ${{ matrix.arch }}
      ARROW_SIMD_LEVEL: ${{ matrix.simd-level }}
      CLANG_TOOLS: ${{ matrix.clang-tools }}
      LLVM: ${{ matrix.llvm }}
      UBUNTU: ${{ matrix.ubuntu }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Cache Docker Volumes
        uses: actions/cache@v4
        with:
          path: .docker
          key: ${{ matrix.image }}-${{ hashFiles('cpp/**') }}
          restore-keys: ${{ matrix.image }}-
      - name: Setup Python on hosted runner
        if: |
          matrix.runs-on == 'ubuntu-latest'
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: 3
      - name: Setup Python on self-hosted runner
        if: |
          contains(matrix.runs-on, 'self-hosted')
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends python3 python3-dev python3-pip
          python3 -m pip install -U pip
      - name: Setup Archery
        run: python3 -m pip install -e dev/archery[docker]
      - name: Execute Docker Build
        env:
          ARCHERY_DOCKER_USER: ${{ secrets.DOCKERHUB_USER }}
          ARCHERY_DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # GH-40558: reduce ASLR to avoid ASAN/LSAN crashes
          sudo sysctl -w vm.mmap_rnd_bits=28
          source ci/scripts/util_enable_core_dumps.sh
          archery docker run ${{ matrix.image }}
      - name: Docker Push
        if: >-
          success() &&
          github.event_name == 'push' &&
          github.repository == 'apache/arrow' &&
          github.ref_name == 'main'
        env:
          ARCHERY_DOCKER_USER: ${{ secrets.DOCKERHUB_USER }}
          ARCHERY_DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
        run: archery docker push ${{ matrix.image }}

  build-example:
    name: C++ Minimal Build Example
    runs-on: ubuntu-24.04
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 45
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Check CMake presets
        run: |
          cd cpp
          cmake --list-presets
      - name: Run minimal example
        run: |
          cd cpp/examples/minimal_build
          docker compose run --rm minimal
