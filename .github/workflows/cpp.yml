# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'
    tags:
      - '**'
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'
  pull_request:
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'

permissions:
  contents: read

env:
  ARCHERY_DEBUG: 1
  ARROW_ENABLE_TIMING_TESTS: OFF
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:
  windows-mingw:
    name: AMD64 Windows MinGW ${{ matrix.msystem_upper }} C++ ${{ matrix.label }}
    runs-on: windows-2019
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    # Build may take 1h+ without cache.
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - msystem_lower: clang64
            msystem_upper: CLANG64
            use_asan: ON
            use_tsan: OFF
            use_ubsan: ON
            label: "ASAN UBSAN"
          - msystem_lower: clang64
            msystem_upper: CLANG64
            use_asan: OFF
            use_tsan: ON
            use_ubsan: OFF
            label: "TSAN"
    env:
      ARROW_BUILD_SHARED: ON
      ARROW_BUILD_STATIC: OFF
      ARROW_BUILD_TESTS: ON
      ARROW_BUILD_TYPE: release
      ARROW_DATASET: ON
      ARROW_FLIGHT: ON
      ARROW_FLIGHT_SQL: ON
      ARROW_GANDIVA: ON
      ARROW_GCS: ON
      ARROW_HDFS: OFF
      ARROW_HOME: /${{ matrix.msystem_lower}}
      ARROW_JEMALLOC: OFF
      ARROW_PARQUET: ON
      ARROW_S3: ON
      ARROW_SUBSTRAIT: ON
      ARROW_USE_GLOG: OFF
      ARROW_USE_ASAN: ${{ matrix.use_asan }}
      ARROW_USE_TSAN: ${{ matrix.use_tsan }}
      ARROW_USE_UBSAN: ${{ matrix.use_ubsan }}
      ARROW_VERBOSE_THIRDPARTY_BUILD: OFF
      ARROW_WITH_BROTLI: ON
      ARROW_WITH_BZ2: ON
      ARROW_WITH_LZ4: ON
      ARROW_WITH_OPENTELEMETRY: OFF
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_ZSTD: ON
      # Don't use preinstalled Boost by empty BOOST_ROOT
      BOOST_ROOT: ""
      ARROW_CMAKE_ARGS: >-
        -DARROW_PACKAGE_PREFIX=/${{ matrix.msystem_lower}}
        -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON
      # We can't use unity build because we don't have enough memory on
      # GitHub Actions.
      # CMAKE_UNITY_BUILD: ON
      GTest_SOURCE: BUNDLED
    steps:
      - name: Disable Crash Dialogs
        run: |
          reg add `
            "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Checkout Arrow
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem_upper }}
          update: true
      - name: Setup MSYS2
        shell: msys2 {0}
        run: ci/scripts/msys2_setup.sh cpp
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ccache
          key: cpp-ccache-${{ matrix.msystem_lower}}-${{ hashFiles('cpp/**') }}
          restore-keys: cpp-ccache-${{ matrix.msystem_lower}}-
      - name: Build
        shell: msys2 {0}
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$NUMBER_OF_PROCESSORS
          export ASAN_SYMBOLIZER_PATH="$PWD/../../_temp/msys64/clang64/bin/llvm-symbolizer.exe"
          ci/scripts/cpp_build.sh "$(pwd)" "$(pwd)/build"
      - name: Download Timezone Database
        shell: bash
        run: ci/scripts/download_tz_database.sh
      - name: Download MinIO
        shell: msys2 {0}
        run: |
          mkdir -p /usr/local/bin
          wget \
            --output-document /usr/local/bin/minio.exe \
            https://dl.min.io/server/minio/release/windows-amd64/archive/minio.RELEASE.2024-09-13T20-26-02Z
          chmod +x /usr/local/bin/minio.exe
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        id: python-install
        with:
          python-version: 3.9
      - name: Install Google Cloud Storage Testbench
        shell: msys2 {0}
        env:
          PIPX_BIN_DIR: /usr/local/bin
          PIPX_BASE_PYTHON: ${{ steps.python-install.outputs.python-path }}
        run: |
          ci/scripts/install_gcs_testbench.sh default
      - name: Test
        shell: msys2 {0}
        run: |
          pass=0
          runs=10
          for attempt in $(seq 1 $runs); do
            echo "::group::Test run #$attempt"
            if ci/scripts/cpp_test.sh "$(pwd)" "$(pwd)/build"; then $((pass++)); fi
            echo "::endgroup::"
          done
          echo "$pass out of $runs attempts succeeded"
